sil_stage raw

import Builtin
import Swift
import SwiftShims

import Foundation

class Test {
  func test()
  func test1()
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue let test: Test { get }

// test
sil_global hidden [let] @$s4main4testAA4TestCvp : $Test

// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s4main4testAA4TestCvp            // id: %2
  %3 = global_addr @$s4main4testAA4TestCvp : $*Test // users: %12, %8, %7
  %4 = metatype $@thick Test.Type                 // user: %6
  // function_ref Test.__allocating_init()
  %5 = function_ref @$s4main4TestCACycfC : $@convention(method) (@thick Test.Type) -> @owned Test // user: %6
  %6 = apply %5(%4) : $@convention(method) (@thick Test.Type) -> @owned Test // user: %7
  store %6 to [init] %3 : $*Test                  // id: %7
  %8 = load_borrow %3 : $*Test                    // users: %11, %10, %9
  %9 = class_method %8 : $Test, #Test.test : (Test) -> () -> (), $@convention(method) (@guaranteed Test) -> () // user: %10
  %10 = apply %9(%8) : $@convention(method) (@guaranteed Test) -> ()
  end_borrow %8 : $Test                           // id: %11
  %12 = load_borrow %3 : $*Test                   // users: %15, %14, %13
  %13 = class_method %12 : $Test, #Test.test1 : (Test) -> () -> (), $@convention(method) (@guaranteed Test) -> () // user: %14
  %14 = apply %13(%12) : $@convention(method) (@guaranteed Test) -> ()
  end_borrow %12 : $Test                          // id: %15
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = struct $Int32 (%16 : $Builtin.Int32)      // user: %18
  return %17 : $Int32                             // id: %18
} // end sil function 'main'

// Test.test()
sil hidden [ossa] @$s4main4TestC4testyyF : $@convention(method) (@guaranteed Test) -> () {
// %0 "self"                                      // user: %1
bb0(%0 : @guaranteed $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s4main4TestC4testyyF'

// Test.test1()
sil hidden [ossa] @$s4main4TestC5test1yyF : $@convention(method) (@guaranteed Test) -> () {
// %0 "self"                                      // user: %1
bb0(%0 : @guaranteed $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s4main4TestC5test1yyF'

// Test.deinit
sil hidden [ossa] @$s4main4TestCfd : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $Test to $Builtin.NativeObject // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
  return %3 : $Builtin.NativeObject               // id: %4
} // end sil function '$s4main4TestCfd'

// Test.__deallocating_deinit
sil hidden [ossa] @$s4main4TestCfD : $@convention(method) (@owned Test) -> () {
// %0 "self"                                      // users: %6, %3, %1
bb0(%0 : @owned $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  // function_ref Test.deinit
  %2 = function_ref @$s4main4TestCfd : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject // user: %4
  %3 = begin_borrow %0 : $Test                    // users: %5, %4
  %4 = apply %2(%3) : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject // user: %7
  end_borrow %3 : $Test                           // id: %5
  end_lifetime %0 : $Test                         // id: %6
  %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $Test // user: %8
  dealloc_ref %7 : $Test                          // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s4main4TestCfD'

// Test.__allocating_init()
sil hidden [exact_self_class] [ossa] @$s4main4TestCACycfC : $@convention(method) (@thick Test.Type) -> @owned Test {
// %0 "$metatype"
bb0(%0 : $@thick Test.Type):
  %1 = alloc_ref $Test                            // user: %3
  // function_ref Test.init()
  %2 = function_ref @$s4main4TestCACycfc : $@convention(method) (@owned Test) -> @owned Test // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Test) -> @owned Test // user: %4
  return %3 : $Test                               // id: %4
} // end sil function '$s4main4TestCACycfC'

// Test.init()
sil hidden [ossa] @$s4main4TestCACycfc : $@convention(method) (@owned Test) -> @owned Test {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @owned $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = mark_uninitialized [rootself] %0 : $Test   // users: %4, %3
  %3 = copy_value %2 : $Test                      // user: %5
  destroy_value %2 : $Test                        // id: %4
  return %3 : $Test                               // id: %5
} // end sil function '$s4main4TestCACycfc'

sil_vtable Test {
  #Test.test: (Test) -> () -> () : @$s4main4TestC4testyyF	// Test.test()
  #Test.test1: (Test) -> () -> () : @$s4main4TestC5test1yyF	// Test.test1()
  #Test.init!allocator: (Test.Type) -> () -> Test : @$s4main4TestCACycfC	// Test.__allocating_init()
  #Test.deinit!deallocator: @$s4main4TestCfD	// Test.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


