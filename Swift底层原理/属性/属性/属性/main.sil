sil_stage raw

import Builtin
import Swift
import SwiftShims

import Foundation

class Test {
  @_hasStorage @_hasInitialValue static var a: Int { get set }
  @objc deinit
  init()
}

// one-time initialization token for a
sil_global private @$s4main4TestC1a_Wz : $Builtin.Word

// static Test.a
sil_global hidden @$s4main4TestC1aSivpZ : $Int

// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// one-time initialization function for a
sil private [global_init_once_fn] [ossa] @$s4main4TestC1a_WZ : $@convention(c) () -> () {
bb0:
  alloc_global @$s4main4TestC1aSivpZ              // id: %0
  %1 = global_addr @$s4main4TestC1aSivpZ : $*Int  // user: %6
  %2 = integer_literal $Builtin.IntLiteral, 10    // user: %5
  %3 = metatype $@thin Int.Type                   // user: %5
  // function_ref Int.init(_builtinIntegerLiteral:)
  %4 = function_ref @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %5
  %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %6
  store %5 to [trivial] %1 : $*Int                // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
} // end sil function '$s4main4TestC1a_WZ'

// Int.init(_builtinIntegerLiteral:)
sil [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int

// Test.a.unsafeMutableAddressor
sil hidden [global_init] [ossa] @$s4main4TestC1aSivau : $@convention(thin) () -> Builtin.RawPointer {
bb0:
  %0 = global_addr @$s4main4TestC1a_Wz : $*Builtin.Word // user: %1
  %1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3
  // function_ref one-time initialization function for a
  %2 = function_ref @$s4main4TestC1a_WZ : $@convention(c) () -> () // user: %3
  %3 = builtin "once"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -> ()) : $()
  %4 = global_addr @$s4main4TestC1aSivpZ : $*Int  // user: %5
  %5 = address_to_pointer %4 : $*Int to $Builtin.RawPointer // user: %6
  return %5 : $Builtin.RawPointer                 // id: %6
} // end sil function '$s4main4TestC1aSivau'

// static Test.a.getter
sil hidden [transparent] [ossa] @$s4main4TestC1aSivgZ : $@convention(method) (@thick Test.Type) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick Test.Type):
  debug_value %0 : $@thick Test.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref Test.a.unsafeMutableAddressor
  %2 = function_ref @$s4main4TestC1aSivau : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [read] [dynamic] %4 : $*Int   // users: %7, %6
  %6 = load [trivial] %5 : $*Int                  // user: %8
  end_access %5 : $*Int                           // id: %7
  return %6 : $Int                                // id: %8
} // end sil function '$s4main4TestC1aSivgZ'

// static Test.a.setter
sil hidden [transparent] [ossa] @$s4main4TestC1aSivsZ : $@convention(method) (Int, @thick Test.Type) -> () {
// %0 "value"                                     // users: %8, %2
// %1 "self"                                      // user: %3
bb0(%0 : $Int, %1 : $@thick Test.Type):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $@thick Test.Type, let, name "self", argno 2, implicit // id: %3
  // function_ref Test.a.unsafeMutableAddressor
  %4 = function_ref @$s4main4TestC1aSivau : $@convention(thin) () -> Builtin.RawPointer // user: %5
  %5 = apply %4() : $@convention(thin) () -> Builtin.RawPointer // user: %6
  %6 = pointer_to_address %5 : $Builtin.RawPointer to [strict] $*Int // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*Int // users: %9, %8
  assign %0 to %7 : $*Int                         // id: %8
  end_access %7 : $*Int                           // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$s4main4TestC1aSivsZ'

// static Test.a.modify
sil hidden [transparent] [ossa] @$s4main4TestC1aSivMZ : $@yield_once @convention(method) (@thick Test.Type) -> @yields @inout Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick Test.Type):
  debug_value %0 : $@thick Test.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref Test.a.unsafeMutableAddressor
  %2 = function_ref @$s4main4TestC1aSivau : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %7, %10, %6
  yield %5 : $*Int, resume bb1, unwind bb2        // id: %6

bb1:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9

bb2:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %10
  unwind                                          // id: %11
} // end sil function '$s4main4TestC1aSivMZ'

// Test.deinit
sil hidden [ossa] @$s4main4TestCfd : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @guaranteed $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $Test to $Builtin.NativeObject // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
  return %3 : $Builtin.NativeObject               // id: %4
} // end sil function '$s4main4TestCfd'

// Test.__deallocating_deinit
sil hidden [ossa] @$s4main4TestCfD : $@convention(method) (@owned Test) -> () {
// %0 "self"                                      // users: %6, %3, %1
bb0(%0 : @owned $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  // function_ref Test.deinit
  %2 = function_ref @$s4main4TestCfd : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject // user: %4
  %3 = begin_borrow %0 : $Test                    // users: %5, %4
  %4 = apply %2(%3) : $@convention(method) (@guaranteed Test) -> @owned Builtin.NativeObject // user: %7
  end_borrow %3 : $Test                           // id: %5
  end_lifetime %0 : $Test                         // id: %6
  %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $Test // user: %8
  dealloc_ref %7 : $Test                          // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s4main4TestCfD'

// Test.__allocating_init()
sil hidden [exact_self_class] [ossa] @$s4main4TestCACycfC : $@convention(method) (@thick Test.Type) -> @owned Test {
// %0 "$metatype"
bb0(%0 : $@thick Test.Type):
  %1 = alloc_ref $Test                            // user: %3
  // function_ref Test.init()
  %2 = function_ref @$s4main4TestCACycfc : $@convention(method) (@owned Test) -> @owned Test // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Test) -> @owned Test // user: %4
  return %3 : $Test                               // id: %4
} // end sil function '$s4main4TestCACycfC'

// Test.init()
sil hidden [ossa] @$s4main4TestCACycfc : $@convention(method) (@owned Test) -> @owned Test {
// %0 "self"                                      // users: %2, %1
bb0(%0 : @owned $Test):
  debug_value %0 : $Test, let, name "self", argno 1, implicit // id: %1
  %2 = mark_uninitialized [rootself] %0 : $Test   // users: %4, %3
  %3 = copy_value %2 : $Test                      // user: %5
  destroy_value %2 : $Test                        // id: %4
  return %3 : $Test                               // id: %5
} // end sil function '$s4main4TestCACycfc'

sil_vtable Test {
  #Test.init!allocator: (Test.Type) -> () -> Test : @$s4main4TestCACycfC	// Test.__allocating_init()
  #Test.deinit!deallocator: @$s4main4TestCfD	// Test.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


